#!/usr/bin/env python
#Basic imports
from ctypes import *
import sys, os, time
import math 
import time
#ROS imports
import rospy
from skupar.msg import Motor_Status
from skupar.msg import Motor_Demand
from std_msgs.msg import String
from ctypes import *
#Import Roboclaw
import roboclaw
import serial

address = 0x80



#Time
global current_time

#Callback for the values from the Command node. These values are written in the local variables from mdemand.
def callback(demand):
    	rospy.loginfo(rospy.get_caller_id() + 'I heard %s' %(demand))
	#mdemand.setAcceleration = demand.setAcceleration
	mdemand.PWM_M1 = demand.PWM_M1
	mdemand.PWM_M2 = demand.PWM_M2
    
def motor_status():
	currents = roboclaw.ReadCurrents(address)
	if len(currents) > 2:	
		mstatus.currentM1 = currents[1]
		mstatus.currentM2 = currents[2]
        else:
		print ("BAd read??? currents len = %d" %len(currents))
	mstatus.voltage = roboclaw.ReadMainBatteryVoltage(address)[1]/10.0
	rospy.sleep(0.05)
	pub.publish(mstatus)

def drive_motors():
	print ("drive motors")
	if mdemand.PWM_M1 >= 0:
		roboclaw.ForwardM1(address, int(mdemand.PWM_M1*127))
	else:
		roboclaw.BackwardM1(address, int(abs(mdemand.PWM_M2)*127))
	
	if mdemand.PWM_M2 >= 0:
		roboclaw.ForwardM2(address, int(mdemand.PWM_M2*127))
	else:
		roboclaw.BackwardM2(address, int(abs(mdemand.PWM_M2)*127))
	

#Main Program Code
if __name__ == '__main__':
	print ("Starting main")
    	rospy.init_node('motorcontrol', anonymous=True)
######## Getting the Variables from the Launchfile   
    	names = rospy.get_param_names()
    	nodename = rospy.get_name()
    	name = rospy.get_param('~name')
    	USB = rospy.get_param('~USB')
########
	print ("opening roboclaw")
	roboclaw.Open("%s" %USB, 38400)

######## Creating a Motor_Status and Motor_Demand MSG file.
    	mstatus = Motor_Status()
    	mdemand = Motor_Demand()
	
######## Creating the Publisher and Subscriber
    	pub = rospy.Publisher("%s_status" %name, Motor_Status, queue_size = 10)
    	sub = rospy.Subscriber("%s_dmd" %name,Motor_Demand, callback)

######## Start up sequence 
	#check Verson
	print "Version: %s" %roboclaw.ReadVersion(address)[1]
	#get config
	print "Config: %s" %roboclaw.GetConfig(address)[1]
    	
######## Start the control loop
	print ("Entering Loop")
	while not rospy.is_shutdown():    	
		try:
			estatus=0
			motor_status()
			drive_motors()
			#print "Version: %s" %roboclaw.ReadVersion(address)[1]
			#print "Voltage: %s" %roboclaw.ReadMainBatteryVoltage(address)[1]
			#roboclaw.ForwardM1(address, 10)#mdemand.PWM_M1)
			#roboclaw.ForwardM2(address, 20)#mdemand.PWM_M2)
	    	except KeyboardInterrupt:
               		print ("Ctrl-C detected!!  Exiting... ")      
               		estatus=1
		except Exception as e:
			print ("Oh darn, something died: %s " % e)
			estatus=2
	
	
	#Stop the Robot after the nodes has been closed
	roboclaw.ForwardM1(address, 0)
	roboclaw.ForwardM2(address, 0)

	print("Closing...")
	print("Done.")
  	exit()

